<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Matt Trask</title>
    <description>My travels from the start to now.</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 23 Apr 2017 09:32:48 -0500</pubDate>
    <lastBuildDate>Sun, 23 Apr 2017 09:32:48 -0500</lastBuildDate>
    <generator>Jekyll v3.3.1</generator>
    
      
      <item>
        <title>One year later - a look back at my year since SunshinePHP</title>
        <description>&lt;h2&gt;You might be a hobbit if...&lt;/h2&gt;

&lt;p&gt;Once upon a time, I was called a hobbit. Well, not a hobbit per se, but I was told in no uncertain terms my place was in the shire. Dont get me wrong, there is some cool shit that goes on in the shire Im sure. Adventures to Mordor (Lets not talk about how they could have used Eagles and saved us a few hours), dragon fireworks, drinking, tons of food. Freaking paradise right? Well, it wasnt that nice, but after that incident and subsequent blog post I noticed it put in to motion a whole list of things that helped boost my career. But, in reality, the only thing Ive learned is that Im more like an ewok rather then a hobbit.&lt;/p&gt;

&lt;h3&gt;SunshinePHP 2016&lt;/h3&gt;

&lt;p&gt;SunshinePHP 2016 was my first conference. I brought it up and got the go ahead from my boss at the time. It was awesome, I felt like a kid in the lego aisle. Full of excitment and ready to have a good time. I knew a few people going, but it was the people I encountered that I can say changed my life. And not in some cheesy, feel good way. But I walked away from SunshingPHP emboldened to put my name out there. Because of that, 3 months after the conference, I got asked to join a start up. Got asked. I didnt have to apply, rather Jacques watched my progress on twitter and felt that I would add something to his team. I got to work with Elizabeth Smith, which was just amazing. From there, I kept pushing to be involved in the conversations around PHP. Internals, FIG, projects, anything I could. It culminated in my experience at SunshinePHP 2017.&lt;/p&gt;

&lt;h3&gt;SunshinePHP 2017&lt;/h3&gt;

&lt;p&gt;Besides the fact I had to be up at an ungodly hour, I arrived at Sunshine on Thursday and felt a surge of excitement. The biggest difference this year over last year is that rather then walking into this massive hotel alone and unsure of who is there, people were waiting for me to arrive. When I got there, I was immediately greeted by Emily Stamey, got to meet Elizabeth Smith in person (yes, we worked remote together and never got to meet in person) and Chris Hartjes, Cal Evans, Adam Culp, Joe Ferguson and so many more. Its because of my tenacity to be involved I went from &amp;quot;Hey, Im Matt. Nice to meet you&amp;quot; to &amp;quot;Its great to see you again, how are things?&amp;quot;. It truly made for a better conference. The speakers dinner was absolutely phenominal. It was at a place called Cafe Versailles, one of the oldest Cuban restaurants in Miami. I had the pleasure to sit with Gabi D&amp;#39;Avilla, Anthony Ferrera and Elizabeth Smith. This would provide both fun conversation that night as well as multiple conversations and the start of great friendships over the weekend.&lt;/p&gt;

&lt;p&gt;The conference could not have started on a better page. Cal had a great talk, something that I felt was a real inspiration for everyone. I got a chance to see a sneak peak of it, and was happy to see it presented. He had 10 principles as badges which he treats like the badges we see for code coverage/version/maintainers. Even though there were some great talks lined up, I spent most of the day in the uncon and hallway track. Its such a struggle when there are great talks taking place, and yet everyone says find time to get into the hallway track. The first uncon talk was a loosely structured conversation about the internals from Internals developers Elizabeth Smith, Davey Shafik, and Anthony Ferrera. It was awesome to have some of the PHP source code demysitifed a bit by the people who have had a hand in shaping it.&lt;/p&gt;

&lt;p&gt;The continued on with a great talk from David Stanley about how they migrated a production database and wrote a migration tool with the Symfony Console Component. After that it was mostly hanging out.&lt;/p&gt;

&lt;p&gt;(to be continued...)&lt;/p&gt;
</description>
        
          <description>&lt;h2&gt;You might be a hobbit if...&lt;/h2&gt;
</description>
        
        <pubDate>Thu, 02 Feb 2017 00:00:00 -0600</pubDate>
        <link>http://localhost:4000/blog/One-Year-Later/</link>
        <guid isPermaLink="true">http://localhost:4000/blog/One-Year-Later/</guid>
        
        <category>Progress</category>
        
        
      </item>
      
    
      
      <item>
        <title>Two ways to fix the Laravel Postgres Timestamp issue</title>
        <description>&lt;h2&gt;Laravel vs Postgres.&lt;/h2&gt;

&lt;p&gt;Tonight we were working on an issue with timestamps coming from our Postgres database and rendered in Laravel. However we noticed that Carbon hated them and would throw exceptions rather then just manipulate our timestamps. We looked around and found a few ideas, but the one we liked most was this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;public $timestamps = false;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and it disables the &lt;code&gt;getDateFormat()&lt;/code&gt; method from Eloquent. The reason an issue is caused is that the &lt;code&gt;getDateFormat()&lt;/code&gt; is built for MySQL. Since Postgres handles timestamps a bit differently, it gets screwed up when run through the &lt;code&gt;getDateFormat()&lt;/code&gt; method. By setting the timestamp value to false, you are passing a raw Unix timestamp up to Carbon which Carbon can interpret and manipulate. &lt;/p&gt;

&lt;h2&gt;One more way&lt;/h2&gt;

&lt;p&gt;Another way to solve this issue is a little more complex, but easily implemented. It would be to create a model called &lt;code&gt;PostGresModel&lt;/code&gt; and extend the &lt;code&gt;Illuminate\Database\Eloquent\Model&lt;/code&gt;. In this new model class, which you will extend all your models from now, you would create a new &lt;code&gt;getDateFormat()&lt;/code&gt; method and inside it, return &lt;code&gt;&amp;#39;Y-m-d H:i:s.u&amp;#39;&lt;/code&gt; which is how you handle timestamps with Postgres. The whole model would look liked this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;&amp;lt;?php

namespace App;

use Illuminate\Database\Eloquent\Model;

class PostgresModel extends Model
{
    public function getDateFormat()
    {
      return 'Y-m-d H:i:s.u';
    }  
} 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And there you go! We override the base Eloquent &lt;code&gt;getDateFormat()&lt;/code&gt; method to handle Postgres, and now its publicaly availble to your models as long as you extend the new PostgresModel. &lt;/p&gt;

&lt;p&gt;Hopefully these two solutions will help others in the same spot!&lt;/p&gt;
</description>
        
          <description>&lt;h2&gt;Laravel vs Postgres.&lt;/h2&gt;
</description>
        
        <pubDate>Tue, 03 Jan 2017 00:00:00 -0600</pubDate>
        <link>http://localhost:4000/blog/Laravel-Postgres-Timestamps/</link>
        <guid isPermaLink="true">http://localhost:4000/blog/Laravel-Postgres-Timestamps/</guid>
        
        <category>Php,</category>
        
        <category>Laravel,</category>
        
        <category>Postgres</category>
        
        
      </item>
      
    
      
      <item>
        <title>Hi, Im Matt. And I use Laravel.</title>
        <description>&lt;h2&gt;&lt;em&gt;clears throat&lt;/em&gt; Hi, Im new here. Im Matt and I  use Laravel. (Or anything else).&lt;/h2&gt;

&lt;p&gt;So today, a federal holiday here in America where we enjoy what is possibly labelled the worst hang over in 2017 by some people, or if you are me today you are nursing bruises from fighting with your bike as to what direction we want to go.
However, as many people saw on Twitter, a &amp;quot;discussion&amp;quot; erupted over the architecture of a certain framework. I wont give it away but it starts with &amp;quot;L&amp;quot; and ends with &amp;quot;aravel&amp;quot;. Scrolling through the tweets it got noticably hostile because 140 characters is too little a space to have a fruitful and engaged conversation. Also, people in the conversation can not discern between sarcasm or anything else. Now, this isnt just about Laravel, but its been the latest in the discussion.&lt;/p&gt;

&lt;h2&gt;The community fractures everytime this happens&lt;/h2&gt;

&lt;p&gt;Ever since I started with PHP, I have always noticed a divide in the community. If you are a Wordpress developer, then you are ostracized out. If you use Drupal, then you are just a little bit less then &amp;quot;true&amp;quot; PHP developers. And its bullshit. Look, Ill be the first to say I dont like Wordpress or Drupal. A lot of people don&amp;#39;t. There are people who do not like Laravel, or CakePHP (Ive ranted against this one), or Joomla!. All this does is make our community weak. There are reasons people use these tools. At first its to get used to the latest or greatest, or a tool that has been around since forever. People float between tools and people will use what gets the job done fastest. You know why? Shipped code is better then perfect code.&lt;/p&gt;

&lt;p&gt;Shipped code makes money. Shipped code can convert visitors to a site and convert them to paying users. Shipped code can help change the world. Perfect code sits on your github repo, or local machine all day being refactored to the point of no return. If a dev can spin up an instance of Laravel and push out a site then why should anyone else care? If you are a developer who makes money by contracting out and fixing legacy apps, you should want developers pushing shipped code all day long. It just increases your chance of a phone call. Maybe not today, maybe not this year, but it will happen.&lt;/p&gt;

&lt;p&gt;So it comes back to the point, who cares? When these types of arguments pop up on twitter, it only strengthens the divide of the community. And the community is already so fractured that it doesnt need anymore fracturing. We as a community barely survived the debate of the CoC, and its a known fact that certain developers feel left out and hide in their own silos. &lt;/p&gt;

&lt;h2&gt;Criticism can help&lt;/h2&gt;

&lt;p&gt;If you want to lobby criticism to the developers of the tool you do not like, open a PR, submit some code, get invovled. If you are a developer who developed a tool, be prepared for people to have critiques and handle them in a way that makes users of the tools proud to use your stuff. To lambast someone on twitter is what I consider a low. With a 140 character limit, responses are limited, conversation stymed and at the end of the day everyone loses. &lt;/p&gt;

&lt;h2&gt;Final Thoughts&lt;/h2&gt;

&lt;p&gt;Tweets are great to get thoughts out fast, but understand your tweets can open up a can of worms. If you want to say something 
be prepared to have a conversation and back up your thoughts. If the developer of the framework replies, try to help understand each other. We can all use a little more empathy in our conversations rather then being blunt.&lt;/p&gt;

&lt;p&gt;Remember, we are all fighting the same battles, we are just using different tools to do our work. &lt;/p&gt;

&lt;p&gt;Happy 2017!&lt;/p&gt;
</description>
        
          <description>&lt;h2&gt;&lt;em&gt;clears throat&lt;/em&gt; Hi, Im new here. Im Matt and I  use Laravel. (Or anything else).&lt;/h2&gt;
</description>
        
        <pubDate>Mon, 02 Jan 2017 00:00:00 -0600</pubDate>
        <link>http://localhost:4000/blog/Confession-Time/</link>
        <guid isPermaLink="true">http://localhost:4000/blog/Confession-Time/</guid>
        
        <category>Php,</category>
        
        <category>Community,</category>
        
        <category>Fighting,</category>
        
        <category>Laravel</category>
        
        
      </item>
      
    
      
      <item>
        <title>2017 New Year Resolutions</title>
        <description>&lt;h2&gt;Its the new year!&lt;/h2&gt;
</description>
        
          <description>&lt;h2&gt;Its the new year!&lt;/h2&gt;
</description>
        
        <pubDate>Fri, 30 Dec 2016 00:00:00 -0600</pubDate>
        <link>http://localhost:4000/blog/New-Year-Resolutions/</link>
        <guid isPermaLink="true">http://localhost:4000/blog/New-Year-Resolutions/</guid>
        
        <category>Php,</category>
        
        <category>Programming,</category>
        
        <category>Open</category>
        
        <category>Source,</category>
        
        <category>Financials</category>
        
        
      </item>
      
    
      
      <item>
        <title>Looking at Ramsey UUID</title>
        <description>&lt;h2&gt;Its all about that Uuid&lt;/h2&gt;

&lt;p&gt;Welcome to the first installment in my 2113918230981 part series, &amp;quot;Better know a Package!&amp;quot;. Tonight&amp;#39;s package: the famous/infamous &lt;a href=&quot;https://github.com/ramsey/uuid&quot;&gt;Ramsey\Uuid&lt;/a&gt; package that that taught us all what Ramsey is in Scottish, Rhumsaa. Created to give PHP a library to generate Universal Unique Identifiers, this library has been a stallwort in the community. Ben Ramsey created it first under the Rhumsaa namesapce before moving it to the Ramsey namespace, saving us all from learning more Scottish then we needed to ever learn. &lt;/p&gt;

&lt;h2&gt;What is an UUID?&lt;/h2&gt;

&lt;p&gt;A UUID, or Universally Unique Identifier, will generate a 128 bite unique key in different series based on the version you asked for. &lt;a href=&quot;https://tools.ietf.org/html/rfc4122&quot;&gt;RFC-4122&lt;/a&gt; dictates how Uuids should be generated, and recommends 4 types: a time and MAC address based uuid, a name based uuid with md5 hash, a random uuid and a name based uuid with sha1 hash. Each can be used however you want. So lets look as use cases and how we can utilize Ramsey\Uuid to build better software. &lt;/p&gt;

&lt;h2&gt;Uuid version 1 - As Time goes by&lt;/h2&gt;

&lt;p&gt;Uuid 1 is the time and MAC addressed based Uuid provided by Ramsey\Uuid. What this means is that if you run &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;&amp;lt;?php

require __DIR__ . &quot;/../vendor/autoload.php&quot;;

use Blog\Uuid\VersionOne;

$uuid1 = new VersionOne();

for($i = 1; $i &amp;lt;= 5; $i++){
    $uuid = $uuid1-&amp;gt;uuid();
    echo $uuid . &quot;\n&quot;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and defined here:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;&amp;lt;?php

namespace Blog\Uuid;

use Ramsey\Uuid\Uuid;

class VersionOne
{
    public function uuid()
    {
        $uuid = Uuid::uuid1();

        return $uuid-&amp;gt;toString();
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;it will return 5 uuids, as seen here:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;
/**
 * Uuid1
 * e110806e-68d3-11e6-98c2-f45c89b67421
 * e1108ac8-68d3-11e6-9525-f45c89b67421
 * e1108d02-68d3-11e6-b0ca-f45c89b67421
 * e1108f14-68d3-11e6-98b1-f45c89b67421
 * e1109112-68d3-11e6-b0ae-f45c89b67421
 */
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can see both differences and similarities with the 5 uuids returned. This type of uuid creates a Uuid based on a single point of time on one computer. The plus is that since time never goes backwards, you wont get a collision of uuids. One thing to take into mind is that while computer do not share a MAC Address, they can be spoofed, thus potentially causing a collision of uuids. While this is very rare, it is a possibility in terms of security. &lt;/p&gt;

&lt;h2&gt;Version 2&lt;/h2&gt;

&lt;p&gt;There is a verion 2? Of course! Its set for DCE, but not an implementation of RFC 4122, so we wont worry about it. But if you want to learn something more, check it out!&lt;/p&gt;

&lt;h2&gt;Version 3&lt;/h2&gt;

&lt;p&gt;With version 3, we create uuids based on a namespace and then it is md5 hashed. For this example I ran my blog, &lt;code&gt;http://matthewtrask.net&lt;/code&gt; as the namespace to uuid.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;&amp;lt;?php

namespace Blog\Uuid;

use Ramsey\Uuid\Uuid;

class VersionThree
{
    public function uuid()
    {
        $uuidV3 = Uuid::uuid3(Uuid::NAMESPACE_DNS, 'http://matthewtrask.net');

        return $uuidV3-&amp;gt;toString();
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and the bootstrap is:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;&amp;lt;?php

require __DIR__ . &quot;/../vendor/autoload.php&quot;;

use Blog\Uuid\VersionThree;

$uuid3 = new VersionThree();

for($i = 1; $i &amp;lt;= 5; $i++){
    $uuid = $uuid3-&amp;gt;uuid();
    echo $uuid . &quot;\n&quot;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;which will return &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;/**
 * Uuid3
 * 51e103b4-5333-388c-b72f-c362929a2b1f
 * 51e103b4-5333-388c-b72f-c362929a2b1f
 * 51e103b4-5333-388c-b72f-c362929a2b1f
 * 51e103b4-5333-388c-b72f-c362929a2b1f
 * 51e103b4-5333-388c-b72f-c362929a2b1f
 */
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So what do we learn here? Well, Uuid::uuid3() is not random. It is generated based on what is inputted. So should we change the namespace to lets say: &lt;code&gt;https://waltdisneyworld.com&lt;/code&gt; we get the following:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt; /**
 * WDW Uuid 3
 * f815042b-3562-3d0d-8aea-e2ebf858725d
 * f815042b-3562-3d0d-8aea-e2ebf858725d
 * f815042b-3562-3d0d-8aea-e2ebf858725d
 * f815042b-3562-3d0d-8aea-e2ebf858725d
 * f815042b-3562-3d0d-8aea-e2ebf858725d
 */
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Notice how all values change based on input, but they repeat for the inputed value. &lt;/p&gt;

&lt;h2&gt;Version 4 - Super Duper So Rad Random&lt;/h2&gt;

&lt;p&gt;Uuid version 4 is currently the one my company uses to identify all the things. Its great because its random. Its the perfect id mechanism. Even better, its great for exposing things to the world without others being able to run a script against our APi and get a general idea of the size of our DB. &lt;a href=&quot;https://twitter.com/philsturgeon&quot;&gt;Phil Sturgeon&lt;/a&gt; writes about why we should expose uuids over ids in &lt;a href=&quot;https://philsturgeon.uk/http/2015/09/03/auto-incrementing-to-destruction/&quot;&gt;this article he wrote&lt;/a&gt;. So lets see what we get returned to us when we run this script. &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt; &amp;lt;?php

namespace Blog\Uuid;

use Ramsey\Uuid\Uuid;

class VersionFour
{
    public function uuid()
    {
        $uuid = Uuid::uuid4();

        return $uuid-&amp;gt;toString();
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;with the bootstrap:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;&amp;lt;?php

require __DIR__ . &quot;/../vendor/autoload.php&quot;;

use Blog\Uuid\VersionFour;

$uuid4 = new VersionFour();

for($i = 1; $i &amp;lt;= 5; $i++){
    $uuid = $uuid4-&amp;gt;uuid();
    echo $uuid . &quot;\n&quot;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;returns to us:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;/**
 * Uuid v4
 * 151f8d47-99c3-43c9-8993-e0ffb3a7704d
 * a45c23a6-ad73-4417-aff9-604c4c195580
 * f0668777-0ea5-4503-8ffe-abc3e740f553
 * 64067149-1804-4f71-b754-38765add464b
 * f4c5e9e0-d1a6-4cf1-b69b-4815439f4091
 */
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As you can see there thery are random, with from what I can see, only spot in the uuid sharing the same number across all 5 generated uuid&amp;#39;s. We will talk about use cases in a bit, but I wanted you to notice that this has so much potential for many different use cases in your application. &lt;/p&gt;

&lt;h2&gt;Version 5&lt;/h2&gt;

&lt;p&gt;Version 5 of the Uuid spec is extremely similiar to Version 3 in that it is namespace based but instead of using md5 it utilizies the sha1 hash. Lets take a look:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;&amp;lt;?php

namespace Blog\Uuid;

use Ramsey\Uuid\Uuid;

class VersionFive
{
    public function uuid()
    {
        $uuid = Uuid::uuid5(Uuid::NAMESPACE_DNS, 'http://matthewtrask.net');

        return $uuid-&amp;gt;toString();
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;with the bootstrap:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;&amp;lt;?php

require __DIR__ . &quot;/../vendor/autoload.php&quot;;

use Blog\Uuid\VersionFive;

$uuid5 = new VersionFive();

for($i = 1; $i &amp;lt;= 5; $i++){
    $uuid = $uuid5-&amp;gt;uuid();
    echo $uuid . &quot;\n&quot;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;which returns to us:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;/**
 * Uuid5
 * 0fcbe08b-1a1b-552a-8406-9c68e20106f6
 * 0fcbe08b-1a1b-552a-8406-9c68e20106f6
 * 0fcbe08b-1a1b-552a-8406-9c68e20106f6
 * 0fcbe08b-1a1b-552a-8406-9c68e20106f6
 * 0fcbe08b-1a1b-552a-8406-9c68e20106f6
 */
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Again, all 5 are the same, cause its based on the input. I passed &lt;code&gt;http://matthewtrask.net&lt;/code&gt; and get the uuid backed based on that namespace. &lt;/p&gt;

&lt;h2&gt;Use Cases for Uuids&lt;/h2&gt;

&lt;p&gt;After looking at the 4 types of Uuid&amp;#39;s the Ramsey\Uuid library provides, its time to look at how you want to use these. Its simple to look at version one and say that you can use that to identify work stations in a data center or enterprise level business with hundreds of work stations. But you should take note, that this isnt a Uuid you should use for security, its guessable through MAC Address sppofing. &lt;/p&gt;

&lt;p&gt;For version&amp;#39;s 3 and 5, the fun thing is that they are completely reproducable with the same algorithm. So if you lose the Uuid, you can re-generate it with the same code provided you still have the code laying around. Now why would you use this? Thats one thing Im looking at. I guess you could use it to securely pass around website ideas on the open web, but unless you are trying to hide the website from public view then you shouldnt have it on the open web. If you have a list of websites from where people are coming from, you can run a check against uuid&amp;#39;s in that sense, but I dont think that creates a good use case. &lt;/p&gt;

&lt;p&gt;Version 4 is the one most people use and its easy to see the use case here. As the Phil Sturgeon article points out, using and exposing an auto-incrementing id through an API is a fast way to let the competition run a script against the endpoint and get a rough esitmate of your database. So this works in protecting your database and user base from competition trying to size you up. Also, using an Uuid v4 allows for greater uniqueness. Rather then come up with a complex id system to track the various id&amp;#39;s floating in your system (user&lt;em&gt;id/job&lt;/em&gt;id/transaction_id), you can create a &lt;code&gt;Uuid::uuid4()&lt;/code&gt; for each one and never have to work on concurrent id&amp;#39;s across a system. &lt;/p&gt;

&lt;h2&gt;Thoughts&lt;/h2&gt;

&lt;p&gt;As I finish up the first installment of my 1231923808 series of &amp;quot;Better Know a Library!&amp;quot;, it was a lot of fun to look deeper in to Uuids. Ive seen Ben give a talk about Uuid&amp;#39;s, but running scripts to see them for myself greatly helped me understand them better. &lt;/p&gt;

&lt;p&gt;Until next time, have fun uuid-ing everything in your system!&lt;/p&gt;
</description>
        
          <description>&lt;h2&gt;Its all about that Uuid&lt;/h2&gt;
</description>
        
        <pubDate>Mon, 22 Aug 2016 00:00:00 -0500</pubDate>
        <link>http://localhost:4000/blog/Looking-At-Ramsey-Uuid/</link>
        <guid isPermaLink="true">http://localhost:4000/blog/Looking-At-Ramsey-Uuid/</guid>
        
        <category>Php,</category>
        
        <category>Uuid,</category>
        
        <category>Open</category>
        
        <category>Source,</category>
        
        <category>Libraries,</category>
        
        <category>Programming</category>
        
        
      </item>
      
    
      
      <item>
        <title>Goals</title>
        <description>&lt;h3&gt;Holding myself accountable. To myself.&lt;/h3&gt;

&lt;p&gt;&lt;blockquote style=&quot;margin-left: 5%&quot; class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;Its officially the second half of the year. Did you accomplish goals for the first part? Set new ones? What are they?&lt;/p&gt;&amp;mdash; HTTP 1.1 GET /matt (@matthewtrask) &lt;a href=&quot;https://twitter.com/matthewtrask/status/760087193234780160&quot;&gt;August 1, 2016&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;Two days agoI posted that tweet. It was simple enough, over the weekend I had to drive to Columbia, SC for my brother&amp;#39;s engagement party. While we were driving, my girlfriend asleep in the passenger seat, our dog chilling in the back. The quiet gave me time to think and with the time of the year, I naturally looked back at the year so far. I cant believe its over half finished and yet theres so much to do. So lets take a trip back and see where I started and where I am today. Hopefully this post gets you going as well. &lt;/p&gt;

&lt;h4&gt;First Half&lt;/h4&gt;

&lt;p&gt;The first half of the year helped me cross off one huge goal, getting to a conference. There is a blog post about it, but suffice to say it, it was a great time. I was happy to put names to twitter handles, shake hands, learn and start making a name for myself. Little did I know I would do that quickly. &lt;/p&gt;

&lt;p&gt;One of my biggest goals that extended from last year was learning how to be better at testing. I was fortunate enough (read: coworker was sick) that I took over the CI position at our office. It was a small foray into devops, which really interested me. I was extremely fortunate that the person who helped me learn the idea of CI was the man, the myth, the legend Sebastian Bergmann himself. Learning CI helped another goal, learning to manage a code base with tests. Testing is something that I love. I love the idea of testing. Actually writing tests? Wellllllll, eh. But the idea is pretty awesome. &lt;/p&gt;

&lt;p&gt;Another goal, one realized sooner then later was leaving Insight Global. It was a great stepping stone, but it was quickly apparent that it was a stepping stone rather then a place that was suited for a long term career. Issues were all over, with a true lack of sense in terms of the development team. I was fortunate enough that Jacques Woodock from Tandum was impressed with how I held myself at Sunshine PHP and on twitter. My quest to learn made him want to bring me on, which greatly helped my career. Ive been lucky enough to work under Elizabeth Smith, who is brilliant and has helped me learn to simplify and write better code. &lt;/p&gt;

&lt;p&gt;Outside of work, I finally moved into Atlanta, bought a bike and have been biking around Atlanta. Its a great workout, something I tend to do during lunch. My amazing girlfriend has moved in as well, which makes life even better. I told myself I would speak as often as I could. I spoke at one conference, Great Wide Open, and three different user groups: AtlantaPHP, UpstatePHP and NashvillePHP. I did a lightning talk for NomadPHP as well. Ive started to make more contributions to open source. What was once a scary world of the unknown as turned into a great group of friends I can call on for help and advice and likewise them of me. &lt;/p&gt;

&lt;h4&gt;Second Half&lt;/h4&gt;

&lt;p&gt;So what are my second half goals? One more conference would be great. I know Im speaking at two more user groups in September, and I need to get my talks ready. As for work, I aim to continue working hard at Tandum. Its been a challenge with some roadblocks and bumps, but its been so worth it. I was scared to make the jump but its been great so far. I hope it continues. I plan on making more blog posts. One thing Ive started is a small journal. After every day, I finish up with a quick entry. What did I do, what could I have done better and what was something I learned are all things I cover. I add my bike routes too. &lt;/p&gt;

&lt;p&gt;Outside of work, I want to travel more, I want to stop rushing through life. Id like to start averaging 60 plus miles a week. Id love to blog more as well. I have some planned, including a website update Id like to do. The blog is most important. It helps me learn. So Im going to start picking libraries and packages and frameworks and build something and then blog quickly. Will it be the best blog ever? No. But itll be fun to do!&lt;/p&gt;

&lt;p&gt;I want to be more prominent in the open source community as well. I dont want to be afraid of failure. I want to make PR&amp;#39;s, help with other PR&amp;#39;s, and be someone people look up too like how I look up to others. Most importantly, I want to learn. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;I want to learn&lt;/em&gt;&lt;/p&gt;
</description>
        
          <description>&lt;h3&gt;Holding myself accountable. To myself.&lt;/h3&gt;
</description>
        
        <pubDate>Wed, 03 Aug 2016 00:00:00 -0500</pubDate>
        <link>http://localhost:4000/blog/goals/</link>
        <guid isPermaLink="true">http://localhost:4000/blog/goals/</guid>
        
        <category>Php,</category>
        
        <category>Goals,</category>
        
        <category>Programming,</category>
        
        <category>Career</category>
        
        
      </item>
      
    
      
      <item>
        <title>Speaking at Upstate PHP</title>
        <description>&lt;h2&gt;Welcome to Upstate PHP&lt;/h2&gt;

&lt;p&gt;If you didnt pay attention to Twitter last week, you missed the tweet storm from &lt;a href=&quot;https://twitter.com/stevenwadejr&quot;&gt;Steven Wade Jr&lt;/a&gt;
about my impending visit to &lt;a href=&quot;http://upstatephp.com&quot;&gt;UpstatePHP&lt;/a&gt; to speak about building awesome API&amp;#39;s. This was huge for me for a few 
reasons. One is that I was invited, two was that it was a different user group and three it was another step into a goal of mine, speaking at a PHP conference.&lt;/p&gt;

&lt;p&gt;Greenville, SC is only 2 hours from Atlanta. It was a straight shot up I-85, so easy drive. Going after work allowed me to avoid most traffic but unfortunately Atlanta
doesnt have a good time to leave and avoid any kind of traffic. But once I was on the highway, it was easy going. I put on a podcast and was in for an easy, albeit boring
drive. Once I got there, the AirBnB dude was a great host for me. I settled in and went over the slides again, checking to see what I could add or remove. &lt;/p&gt;

&lt;p&gt;In the morning, I hit up a place called Coffee Underground which was perfect. Excellent coffee and breakfast sandwiches abound, it was a great coffee shop. Not super small
so you could spread out, places to plug in and power up laptops and devices. One huge thing is that OpenWorks threw me a day pass, which helped me have a 
dedicated place to do video chats, and work without having to be a bother to a coffee shop or their patrons. OpenWorks was a fantastic place, if you need
a place to work in Greenville, I highly recommend them. &lt;/p&gt;

&lt;h2&gt;Meeting Time&lt;/h2&gt;

&lt;p&gt;After we finished up, Steven, Matt and I packed up and went over to Coffee Underground where we hung out for a few minutes before it was time to get the pizza. 
After grabbing the pizza, we walked over to the meeting spot with the pizza and set things up. It was a good crowd, especially for a young meetup group. At lunch, Steven had asked me
how to get the user group members interested in the community I owed my career too. I offered to do a &amp;quot;mini&amp;quot; (like 10 minutes if that) talk about the community. It was great, and 
I saw people following others on Twitter, asking how to join the IRC rooms etc. One lady had posed the question to me about conferences when I realized that they were hungry to learn. 
I had a pass to All Things Open which I gave away as well as a pass to Connect.Tech, a conference in Atlanta. After we did that, they split the group up so they newer people could
continue their PHP Lessons while I talked to the experienced developers about REST API&amp;#39;s. &lt;/p&gt;

&lt;p&gt;After it was all over, the flurry of tweets appeared which showed me I did a decent job. The morale of this story is if there is a user group near you, get to it. If there is one
within a few hours drive and you can manage it, get to that one too! Having user groups cross pollenate will help grow the community. As it is with UpstatePHP, they have been 
looking for speakers, so now they have one that can pop up and talk often. And now there is another experienced developer in their midst so people with questions can ask and connect. &lt;/p&gt;

&lt;p&gt;Want me to come to your user group? Feel free to conect me! I can either come intown or talk over video chat. Either way, lets make some plans!&lt;/p&gt;
</description>
        
          <description>&lt;h2&gt;Welcome to Upstate PHP&lt;/h2&gt;
</description>
        
        <pubDate>Mon, 23 May 2016 00:00:00 -0500</pubDate>
        <link>http://localhost:4000/blog/Speaking-At-Upstate-PHP/</link>
        <guid isPermaLink="true">http://localhost:4000/blog/Speaking-At-Upstate-PHP/</guid>
        
        <category>Php,</category>
        
        <category>user</category>
        
        <category>groups,</category>
        
        <category>speaking</category>
        
        
      </item>
      
    
      
      <item>
        <title>Pushing past Imposter Syndrome</title>
        <description>&lt;h1&gt;I have Imposter Syndrome.&lt;/h1&gt;

&lt;h3&gt;And so does everyone else.&lt;/h3&gt;

&lt;p&gt;Per Wikipedia.org: &amp;quot;Impostor syndrome (also spelled imposter syndrome, also known as impostor phenomenon or fraud syndrome) is a term coined in 1978 by clinical psychologists Dr. Pauline R. Clance and Suzanne A. Imes referring to high-achieving individuals marked by an inability to internalize their accomplishments and a persistent fear of being exposed as a &amp;quot;fraud&amp;quot;&amp;quot;.&lt;/p&gt;

&lt;p&gt;I have that exact problem. It sucks. Its been a driving force into why Im timid at times, its been a driving force of fear in my life. Ive accomplished some amazing things so far. And yet, as I look forward to new challenges, I never think that my past is the reason why I can succeed time and time again. &lt;/p&gt;

&lt;p&gt;In fact, I just started working for Tandum, run by the awesome &lt;a href=&quot;https://twitter.com/jacqueswoodcock&quot;&gt;Jacques Woodcock&lt;/a&gt;. He personally asked him to come work for him. After being flattered he would ask me of all people, doubt flooded my brain. Its a start up, its going to be the biggest challenge Ive ever encountered. All through the interview process I did pretty good, cause they kept scheduling more interviews. Fun times right? When the offer came in, thats when it all hit me. The imposter syndrome flooded throughout me. I at one point even told Jacques thats its a no go. After he talked me off of that, I started my journey with him at Tandum. Its been a great time, but the reason Im writing this is cause this week was a big bout of the Imposter Syndrome. &lt;/p&gt;

&lt;p&gt;What generally happens is either you have a job, project or even task. Immediately you look at it like ok seems easy enough, but then I personally freeze. Of course I know how to do {$php_action}. Make a key for an array, sure. Alter a SQL query, definitely. But then I freeze, Ill get overwhelmed. I forget the simple things. And suddenly a simple task has just become a monster looming over me. And this is my struggle. And I know its a struggle for a lot of people. And Im still looking for a solid answer on what to do when these things happen. Right now, its take a lot of notes, write things down, UML map it out. But thats cumbersome at times. One thing that has helped is a direct line to the senior developer, &lt;a href=&quot;https://twitter.com/auroraeosrose&quot;&gt;Elizabeth Smith&lt;/a&gt;. At my previous job, we had &amp;quot;ze Germans&amp;quot;, Arne Blankerts, Stefan Priebsch and Sebastian Bergmann. Wanna talk about getting hit with imposter syndrome? Try walking through code with those guys. Elizabeth is on the same levels as them. Wicked smart and wants me to succeed. Thats what everyone wants in the end. No one wants to hire someone and have them level in a few weeks. They want them to settle in and kick ass. Both the Germans and Jacques and Elizabeth want the same thing. Its something you should remind yourself everyday. And its why Im so damn proud of this community. While we are all busy, Elizabeth takes the time to reach out and see when if Im stuck, or what she can clear up for me. While Im not going to get better over night, she has helped immensely. &lt;/p&gt;

&lt;p&gt;Unfortunately, this has extended into the open source programming I want to do. I would love nothing more then to contribute to a project, but this imposter syndrome has a rampant fear over me. Why? Shit I dont know. Sometimes its because I dont know how to replicate the issue, othertimes I look at a bug in the issues section of Github and while it looks easy, I get lost in it. The best advice I got about this was from Stefan Priebsch, who told me &amp;quot;At the simplest, all this is is taking data in and returning data. Thats all. So break it down to that point. When you get there, work on that small issue and build up&amp;quot;. Is it tough to do that, yea. But I wont lie, it helps.&lt;/p&gt;

&lt;p&gt;If you are getting stuck with Imposter Syndrome, take heart in knowing its not just you. And remember, break the issue down to the smallest possible point, and build up from there. It works, I promise.&lt;/p&gt;

&lt;p&gt;If you ever want someone to talk about it, please feel free to reach out. Im always happy to talk.&lt;/p&gt;
</description>
        
          <description>&lt;h1&gt;I have Imposter Syndrome.&lt;/h1&gt;
</description>
        
        <pubDate>Tue, 17 May 2016 00:00:00 -0500</pubDate>
        <link>http://localhost:4000/blog/imposter-syndrome/</link>
        <guid isPermaLink="true">http://localhost:4000/blog/imposter-syndrome/</guid>
        
        <category>Programming,</category>
        
        <category>Imposter</category>
        
        <category>Syndrome,</category>
        
        <category>Issues</category>
        
        
      </item>
      
    
      
      <item>
        <title>MVC vs CMS: Best tool for the job</title>
        <description>&lt;h2&gt;MVC vs CMS&lt;/h2&gt;

&lt;p&gt;A debate rages in programming communities. Its a good question, one that overwhelms junior developers and splits senior developers. The question is when to use a CMS over an MVC and vice versa. Both are fantastic tools and I am not out to slander either set. I have my personal preference and to each their own. But trying to keep away bias&amp;#39;, lets look at when is the right time for a CMS and the right time for an MVC application. First lets define what each is. A CMS, or Content Management System, is a software platform that allows for total control over the content of the webpage. Themes can be changed with the click of a button, and non-technical people can use them with great ease. Wordpress, Drupal, Bolt, are Joomla! are currently the biggest players in the CMS arena. Others are coming around, but these currently hold the mass marketshare. Wordpress alone powers 25% of the internet. Thats a huge number. On the flip side, MVC is Model-View-Controller. This pais with the Singleton design pattern, which allows access of the global state throughout the entire application. You see already where I am headed, in that to use and build something with the MVC pattern, you need some overhead knowledge of programming. Laravel (php), Rails (ruby) and Django (python) are the current reigning champions of MVC. Plenty more are around, but to keep it short and simple, we will look at these three as the ones you should know for MVC.&lt;/p&gt;

&lt;h2&gt;When to use a CMS&lt;/h2&gt;

&lt;p&gt;Are you building an application for the marketing team that should just work? Are you on a swamped IT team that cant handle maintaining an application? This calls for a CMS. They are made for non technical people to use and manage their content without a developer doing it for them. Now, this isnt to say that you cant make a CMS with Laravel. You definitely can. However at this point, Wordpress has name recognition as well as features that people want, why reinvent the wheel? With Wordpress and others though, the admin panel is designed to be intuitive and easy to use. You would spend years rebuilding it with something else.&lt;/p&gt;

&lt;h2&gt;When to use an MVC application&lt;/h2&gt;

&lt;p&gt;Got a app you want to create? Wanna use some APIs? Easily done in the MVC style. Generally with an MVC application, its not about continuous updates, but more code driven updates. The code base can also hande heavy functions. While you can make a CMS out of an MVC application, the features that Wordpress has would cause months or even years of development. Instead, use MVC to focus on applications that will help the business such as a user portal, point of sale system, event tracking and let the CMS handle the client facing content website. &lt;/p&gt;

&lt;h2&gt;Thoughts&lt;/h2&gt;

&lt;p&gt;Both CMS and MVC applications have their place in the world of application development. Its up to you to learn when to pick the best tool for the job. Hopefully this gives you a good insight to the basics of the differences! &lt;/p&gt;

&lt;p&gt;Cheers.&lt;/p&gt;
</description>
        
          <description>&lt;h2&gt;MVC vs CMS&lt;/h2&gt;
</description>
        
        <pubDate>Tue, 15 Mar 2016 00:00:00 -0500</pubDate>
        <link>http://localhost:4000/blog/MVC-vs-CMS/</link>
        <guid isPermaLink="true">http://localhost:4000/blog/MVC-vs-CMS/</guid>
        
        <category>Laravel,</category>
        
        <category>Dev,</category>
        
        <category>PHP,</category>
        
        <category>MVC,</category>
        
        <category>CMS,</category>
        
        <category>Wordpress,</category>
        
        <category>Drupal</category>
        
        
      </item>
      
    
      
      <item>
        <title>Moving OBCT to Laravel</title>
        <description>&lt;h1&gt;Laravel New OBCT&lt;/h1&gt;

&lt;p&gt;I have this project. It&amp;#39;s not glamorous, its not a super profitable website, but it is one I enjoy working on. We developers tend to
have one or two that are close to our hearts. No matter how frustrating it can be, you put this project first and make it happen.
For me, its &lt;a href=&quot;http://offbroadwaykids.net&quot;&gt;OBCT&lt;/a&gt;. I taught guitar lessons there for a few years, and it was an absolutely wonderful
place to be. The owners, Shannon and Chris, have done a great job fostering an amazing community there. Kids are able to come learn
the art of dancing and music in a fun environment.&lt;/p&gt;

&lt;p&gt;Well, when I moved to programming, they asked if I could update their site. Of course! Without going into too many details, the code
for this site resembles my career. First it was a mess, includes and requires everywhere. Then I learned the joys of frameworks. So I
moved the site to a framework. That wasn&amp;#39;t enough, as I learned about setting up my own servers. Tons of trials and errors. But now,
we are at the point of this past week.&lt;/p&gt;

&lt;h2&gt;Use Lets Encrypt they said.&lt;/h2&gt;

&lt;p&gt;Its making the rounds now. Its an open source library that lets you place SSL, or Secure Socket Layer, certificates on your web server.
If you dont know what it is, go visit a site, and click on the url at the top. You&amp;#39;ll see a locked symbol and hovering over it should
reveal details about the SSL cert. Everyone was raving about it, so why not? An SSL is a great thing, it protects all web traffic data.
And with some of the ideas I was coming up with for OBCT, an SSL was needed. (Sidenote, I tend to treat OBCT as a playground. I bring
libraries in here and use them so I can see if I like them or not).&lt;/p&gt;

&lt;p&gt;This past week I got a notice to update the cert. No biggie, I look and the command is something like&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-command-line&quot; data-lang=&quot;command-line&quot;&gt;  ./lets-encrypt renew
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;so I run it. It gives me the all good and I continue on with my day.  Soon after, I receieved an email saying all the links on the site
were down. This seeming odd, I logged in both SSH&amp;#39;d to the server, and to the site. Sure enough, everything was a 404 error of awesome.
At this point, I tried to undo the Let&amp;#39;s Encrypt process, but that was too late. Thinking fast, I knew it was time to blew things up and
start fresh. So I pulled the site down, and destroyed the server.&lt;/p&gt;

&lt;h2&gt;Laravel new Obct&lt;/h2&gt;

&lt;p&gt;So lets look at a few things behind the scenes before I get into more details with the move. Originally the site was built on a framework called &lt;a href=&quot;http://simplemvcframework.com&quot;&gt;SimpleMVC&lt;/a&gt;. I, along with my friend and coworker Justin, had built &lt;a href=&quot;http://transparenttradecoffee.com&quot;&gt;Transparent Trade Coffee&lt;/a&gt; on the same platform. As the name implies, its dead simple. However, when they released 2.2, they introduced both new packages and breaking changes. If you know anything about SemVer, a X.1.X change should not be breaking. It can introduce new features, but should not break backwards compatibility. But I digress. Other then the framework, there wasnt much else to the site. I had a few packages, mainly Nesbot\Carbon for better time functions. I had the Foundation CSS framework in place.&lt;/p&gt;

&lt;p&gt;Deciding to move frameworks is no small feat. And it was even harder when I was giving up my weekend. So Friday night, I ran the inital command and just started. Note that I had some beer. Was worth it. Laravel makes this easy too. With the artisan commands, I was up and running in moments. Starting first with&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-command-line&quot; data-lang=&quot;command-line&quot;&gt;$ php artisan make:migration create_table
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I had an easy way to start the data migration. I could have used a simple SQL import, but with these commands at my use, I figured I would give this a go. After the date was moved into the tables, all I needed was controllers. With Laravel, there is two options, either you can create your own controllers, or Laravel can build you an awesome HTTP Controller. What that means is that the controller will have specific functions mapped to the verbs of HTTP: Get, Post, Put, Delete, Patch. For this project, I went with custom controllers. Keeping with SOLID, life just got even easier. A mistake I made on the old version was that there was one controller for the whole project. For this project, theres already 10 controllers, and I plan on adding more.&lt;/p&gt;

&lt;h2&gt;Auth&lt;/h2&gt;

&lt;p&gt;The nice thing about Laravel, is that it is pre-packaged with an auth class, which makes users and passwords that much easier. I plan on writing a post specifically about that in the future. I have found the documentation for it wasnt great. But the idea with OBCT is two things, move the studio off its current platform of class sign ups, and allow people to buy tickets through the site. With the authc classes, these tasks will be insanely easy to accomplish. I already know I need to bring in the Leagues OmniPay package, as well as Fractal. Both these will help make these things happen.&lt;/p&gt;

&lt;h2&gt;Thoughts&lt;/h2&gt;

&lt;p&gt;I have always been weary of Laravel. Multiple times I started a project and got roadblocked fast. So why was it so easy this time? It is cause over the past few months, work has had me focused on POPO, or Plain Old PHP Objects. Using those, without the crutch of a library or framework made spinning up a Laravel application ten times easier. Now I have another tool in the library I can pull out and use.  &lt;/p&gt;
</description>
        
          <description>&lt;h1&gt;Laravel New OBCT&lt;/h1&gt;
</description>
        
        <pubDate>Tue, 15 Mar 2016 00:00:00 -0500</pubDate>
        <link>http://localhost:4000/blog/Moving-OBCT-To-Laravel/</link>
        <guid isPermaLink="true">http://localhost:4000/blog/Moving-OBCT-To-Laravel/</guid>
        
        <category>Laravel,</category>
        
        <category>Dev,</category>
        
        <category>PHP</category>
        
        
      </item>
      
    
  </channel>
</rss>
